{"ast":null,"code":"import * as i0 from \"@angular/core\";\nimport * as i1 from \"../imdb.service\";\nimport * as i2 from \"@angular/common\";\nfunction PeliculasComponent_tr_13_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r3 = i0.ɵɵgetCurrentView();\n    i0.ɵɵelementStart(0, \"tr\")(1, \"td\");\n    i0.ɵɵelement(2, \"img\", 3);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(3, \"td\");\n    i0.ɵɵtext(4);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(5, \"td\")(6, \"button\", 1);\n    i0.ɵɵlistener(\"click\", function PeliculasComponent_tr_13_Template_button_click_6_listener() {\n      const restoredCtx = i0.ɵɵrestoreView(_r3);\n      const peli_r1 = restoredCtx.$implicit;\n      const ctx_r2 = i0.ɵɵnextContext();\n      return i0.ɵɵresetView(ctx_r2.insertar(peli_r1));\n    });\n    i0.ɵɵtext(7, \"fav\");\n    i0.ɵɵelementEnd()()();\n  }\n  if (rf & 2) {\n    const peli_r1 = ctx.$implicit;\n    i0.ɵɵadvance(2);\n    i0.ɵɵpropertyInterpolate(\"src\", peli_r1.image, i0.ɵɵsanitizeUrl);\n    i0.ɵɵpropertyInterpolate(\"alt\", peli_r1.title);\n    i0.ɵɵadvance(2);\n    i0.ɵɵtextInterpolate(peli_r1.title);\n  }\n}\nexport class PeliculasComponent {\n  constructor(_service) {\n    this._service = _service;\n  }\n  mostrarPelis() {\n    let input = document.getElementById('buscador');\n    let url = \"https://imdb-api.com/en/API/SearchMovie/k_28i8k3sj/\" + input.value;\n    this._service.getPeliculas(url).subscribe(peliculas => this.peliculas = peliculas);\n    this.peliculas = this.peliculas.results;\n  }\n  anadirFav() {\n    const peticion = indexedDB.open('PacoApp', 2);\n    peticion.onerror = evento => {\n      throw 'Error al conectar indexedDB';\n    };\n    peticion.onupgradeneeded = evento => {\n      console.log(evento);\n      this.conexion = evento.target.result;\n      this.crear();\n    };\n    peticion.onsuccess = evento => {\n      this.conexion = evento.target.result;\n    };\n  }\n  crear() {\n    const tabla = this.conexion.createObjectStore('Favoritas', {\n      keyPath: 'id',\n      autoIncrement: true\n    });\n  }\n  insertar(objeto) {\n    this.anadirFav();\n    const transaccion = this.conexion.transaction(['Favoritas'], 'readwrite');\n    transaccion.onerror = evento => {\n      throw 'Error al insertar';\n    };\n    const tabla = transaccion.objectStore('Favoritas');\n    const peticion = tabla.add(objeto);\n  }\n}\nPeliculasComponent.ɵfac = function PeliculasComponent_Factory(t) {\n  return new (t || PeliculasComponent)(i0.ɵɵdirectiveInject(i1.ImdbService));\n};\nPeliculasComponent.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n  type: PeliculasComponent,\n  selectors: [[\"app-peliculas\"]],\n  decls: 14,\n  vars: 1,\n  consts: [[\"type\", \"text\", \"name\", \"buscador\", \"id\", \"buscador\"], [3, \"click\"], [4, \"ngFor\", \"ngForOf\"], [\"width\", \"128px\", \"height\", \"128px\", 3, \"src\", \"alt\"]],\n  template: function PeliculasComponent_Template(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵelementStart(0, \"h1\");\n      i0.ɵɵtext(1, \"Peliculas\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelement(2, \"input\", 0);\n      i0.ɵɵelementStart(3, \"button\", 1);\n      i0.ɵɵlistener(\"click\", function PeliculasComponent_Template_button_click_3_listener() {\n        return ctx.mostrarPelis();\n      });\n      i0.ɵɵtext(4, \"LISTAR\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(5, \"table\")(6, \"thead\")(7, \"tr\")(8, \"th\");\n      i0.ɵɵtext(9, \"Imagen\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(10, \"th\");\n      i0.ɵɵtext(11, \"Nombre\");\n      i0.ɵɵelementEnd()()();\n      i0.ɵɵelementStart(12, \"tbody\");\n      i0.ɵɵtemplate(13, PeliculasComponent_tr_13_Template, 8, 3, \"tr\", 2);\n      i0.ɵɵelementEnd()();\n    }\n    if (rf & 2) {\n      i0.ɵɵadvance(13);\n      i0.ɵɵproperty(\"ngForOf\", ctx.peliculas);\n    }\n  },\n  dependencies: [i2.NgForOf],\n  styles: [\"\\n/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsInNvdXJjZVJvb3QiOiIifQ== */\"]\n});","map":{"version":3,"mappings":";;;;;;IAWIA,0BAAmC;IAC7BA,yBAAwE;IAAAA,iBAAK;IACjFA,0BAAI;IAAAA,YAAc;IAAAA,iBAAK;IACvBA,0BAAI;IAAQA;MAAA;MAAA;MAAA;MAAA,OAASA,uCAAc;IAAA,EAAC;IAACA,mBAAG;IAAAA,iBAAS;;;;IAFxCA,eAAkB;IAAlBA,gEAAkB;IAACA,8CAAkB;IAC1CA,eAAc;IAAdA,mCAAc;;;ACJxB,OAAM,MAAOC,kBAAkB;EAG7BC,YAAoBC,QAAqB;IAArB,aAAQ,GAARA,QAAQ;EAE5B;EAEAC,YAAY;IACV,IAAIC,KAAK,GAAQC,QAAQ,CAACC,cAAc,CAAC,UAAU,CAAC;IACpD,IAAIC,GAAG,GAAW,qDAAqD,GAAGH,KAAK,CAACI,KAAK;IACrF,IAAI,CAACN,QAAQ,CAACO,YAAY,CAACF,GAAG,CAAC,CAACG,SAAS,CAACC,SAAS,IAAI,IAAI,CAACA,SAAS,GAAGA,SAAS,CAAC;IAClF,IAAI,CAACA,SAAS,GAAG,IAAI,CAACA,SAAS,CAACC,OAAO;EACzC;EAEAC,SAAS;IACP,MAAMC,QAAQ,GAAoBC,SAAS,CAACC,IAAI,CAAC,SAAS,EAAE,CAAC,CAAC;IAC9DF,QAAQ,CAACG,OAAO,GAAGC,MAAM,IAAG;MAAE,MAAM,6BAA6B;IAAA,CAAC;IAClEJ,QAAQ,CAACK,eAAe,GAAID,MAAU,IAAI;MAC9BE,OAAO,CAACC,GAAG,CAACH,MAAM,CAAC;MAC/B,IAAI,CAACI,QAAQ,GAAGJ,MAAM,CAACK,MAAM,CAACC,MAAM;MACpC,IAAI,CAACC,KAAK,EAAE;IACR,CAAC;IACLX,QAAQ,CAACY,SAAS,GAAIR,MAAU,IAAI;MAAE,IAAI,CAACI,QAAQ,GAAGJ,MAAM,CAACK,MAAM,CAACC,MAAM;IAAA,CAAC;EAC7E;EAEAC,KAAK;IACH,MAAME,KAAK,GAAkB,IAAI,CAACL,QAAQ,CAACM,iBAAiB,CAAC,WAAW,EAAE;MAAEC,OAAO,EAAE,IAAI;MAAEC,aAAa,EAAE;IAAI,CAAE,CAAC;EACnH;EAEAC,QAAQ,CAACC,MAAkB;IACzB,IAAI,CAACnB,SAAS,EAAE;IAChB,MAAMoB,WAAW,GAAkB,IAAI,CAACX,QAAQ,CAACY,WAAW,CAAC,CAAC,WAAW,CAAC,EAAE,WAAW,CAAC;IACxFD,WAAW,CAAChB,OAAO,GAAGC,MAAM,IAAG;MAAE,MAAM,mBAAmB;IAAA,CAAC;IAC3D,MAAMS,KAAK,GAAGM,WAAW,CAACE,WAAW,CAAC,WAAW,CAAC;IAClD,MAAMrB,QAAQ,GAAca,KAAK,CAACS,GAAG,CAACJ,MAAM,CAAC;EACjD;;AAnCahC,kBAAkB;mBAAlBA,kBAAkB;AAAA;AAAlBA,kBAAkB;QAAlBA,kBAAkB;EAAAqC;EAAAC;EAAAC;EAAAC;EAAAC;IAAA;MDT/B1C,0BAAI;MAAAA,yBAAS;MAAAA,iBAAK;MAClBA,2BAAiD;MACjDA,iCAAiC;MAAzBA;QAAA,OAAS2C,kBAAc;MAAA,EAAC;MAAC3C,sBAAM;MAAAA,iBAAS;MAChDA,6BAAO;MAGGA,sBAAM;MAAAA,iBAAK;MACfA,2BAAI;MAAAA,uBAAM;MAAAA,iBAAK;MAGnBA,8BAAO;MACLA,mEAIK;MACPA,iBAAQ;;;MALeA,gBAAY;MAAZA,uCAAY","names":["i0","PeliculasComponent","constructor","_service","mostrarPelis","input","document","getElementById","url","value","getPeliculas","subscribe","peliculas","results","anadirFav","peticion","indexedDB","open","onerror","evento","onupgradeneeded","console","log","conexion","target","result","crear","onsuccess","tabla","createObjectStore","keyPath","autoIncrement","insertar","objeto","transaccion","transaction","objectStore","add","selectors","decls","vars","consts","template","ctx"],"sourceRoot":"","sources":["C:\\xampp\\htdocs\\appPaco\\PACO-APP\\src\\app\\peliculas\\peliculas.component.html","C:\\xampp\\htdocs\\appPaco\\PACO-APP\\src\\app\\peliculas\\peliculas.component.ts"],"sourcesContent":["<h1>Peliculas</h1>\r\n<input type=\"text\" name=\"buscador\" id=\"buscador\">\r\n<button (click)=\"mostrarPelis()\">LISTAR</button>\r\n<table>\r\n  <thead>\r\n    <tr>\r\n      <th>Imagen</th>\r\n      <th>Nombre</th>\r\n    </tr>\r\n  </thead>\r\n  <tbody>\r\n    <tr *ngFor=\"let peli of peliculas\">\r\n      <td><img src={{peli.image}} alt={{peli.title}} width=\"128px\" height=\"128px\"></td>\r\n      <td>{{peli.title}}</td>\r\n      <td><button (click)=\"insertar(peli)\">fav</button></td>\r\n    </tr>\r\n  </tbody>\r\n</table>\r\n","import { Component } from '@angular/core';\r\nimport { Peliculas } from '../peliculas';\r\nimport { ImdbService } from '../imdb.service';\r\n\r\n@Component({\r\n  selector: 'app-peliculas',\r\n  templateUrl: './peliculas.component.html',\r\n  styleUrls: ['./peliculas.component.css']\r\n})\r\nexport class PeliculasComponent {\r\n  public peliculas : any;\r\n  public conexion: any;\r\n  constructor(private _service: ImdbService ){\r\n    \r\n  }\r\n\r\n  mostrarPelis(): void{\r\n    let input: any = document.getElementById('buscador');\r\n    let url: string = \"https://imdb-api.com/en/API/SearchMovie/k_28i8k3sj/\" + input.value;\r\n    this._service.getPeliculas(url).subscribe(peliculas => this.peliculas = peliculas);\r\n    this.peliculas = this.peliculas.results\r\n  }\r\n\r\n  anadirFav():void{\r\n    const peticion:IDBOpenDBRequest = indexedDB.open('PacoApp', 2)\r\n    peticion.onerror = evento => {throw 'Error al conectar indexedDB'}\r\n    peticion.onupgradeneeded = (evento:any) => {\r\n                console.log(evento)\r\n    this.conexion = evento.target.result\r\n    this.crear()\r\n        }\r\n    peticion.onsuccess = (evento:any) => {this.conexion = evento.target.result}\r\n  }\r\n\r\n  crear(){\r\n    const tabla:IDBObjectStore = this.conexion.createObjectStore('Favoritas', { keyPath: 'id', autoIncrement: true })\r\n  }\r\n\r\n  insertar(objeto:Peliculas[]){\r\n    this.anadirFav()\r\n    const transaccion:IDBTransaction = this.conexion.transaction(['Favoritas'], 'readwrite')\r\n    transaccion.onerror = evento => {throw 'Error al insertar'}\r\n    const tabla = transaccion.objectStore('Favoritas')\r\n    const peticion:IDBRequest = tabla.add(objeto)\r\n}\r\n\r\n\r\n\r\n}\r\n\r\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}